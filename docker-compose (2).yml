version: "3"

services:

  #redis容器 - Redis container
  redis:
    image: redis:6.2.5-alpine
    container_name: redis
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - ./redis/data:/data:rw
    command: "redis-server --requirepass G62m50oigInC30sf --appendonly yes"
    ports:
      - "6379:6379"
    restart: unless-stopped


  #mysql容器 - Mysql container
  mysql:
    image: mysql:8.0.23
    container_name: mysql8
    volumes:
      - ./mysql/data:/var/lib/mysql:rw
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: PXDN93VRKUm8TeE7
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    ports:
      - "3306:3306"
    restart: unless-stopped


  #mongo容器 - Mongo container
  mongo:
    image: mongo:5.0.2-focal
    container_name: mongo
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 12345678
    volumes:
      - ./mongo/db:/data/db:rw
    ports:
      - "27017:27017"
    restart: unless-stopped


  #etcd容器 - Etcd container
  etcd:
    image: bitnami/etcd:latest
    container_name: etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes # 参数指不用密码可以连接
      - ETCD_NAME=etcd1 # 名称
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_INITIAL_CLUSTER=etcd1=http://0.0.0.0:2380
    volumes:
      - ./etcd:/bitnami/etcd:rw # 注意这个目录容器要可写，不然会报cannot access data directory: open
    ports:
      - "2379:2379"
      - "2380:2380"
    restart: unless-stopped


  # etcd 集群
  # etcd1:
  #   image: bitnami/etcd:latest
  #   container_name: etcd1
  #   environment:
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #     - ETCD_NAME=etcd1
  #     - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd1:2380
  #     - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
  #     - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
  #     - ETCD_ADVERTISE_CLIENT_URLS=http://etcd1:2379
  #     - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
  #     - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
  #     - ETCD_INITIAL_CLUSTER_STATE=new
  #   ports:
  #     - "2379:2379"
  #     - "2380:2380"
  # etcd2:
  #   image: bitnami/etcd:latest
  #   container_name: etcd2
  #   environment:
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #     - ETCD_NAME=etcd2
  #     - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd2:2380
  #     - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
  #     - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
  #     - ETCD_ADVERTISE_CLIENT_URLS=http://etcd2:2379
  #     - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
  #     - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
  #     - ETCD_INITIAL_CLUSTER_STATE=new
  #   ports:
  #     - "12379:2379"
  #     - "12380:2380"
  # etcd3:
  #   image: bitnami/etcd:latest
  #   container_name: etcd3
  #   environment:
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #     - ETCD_NAME=etcd3
  #     - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd3:2380
  #     - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
  #     - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
  #     - ETCD_ADVERTISE_CLIENT_URLS=http://etcd3:2379
  #     - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
  #     - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
  #     - ETCD_INITIAL_CLUSTER_STATE=new
  #   ports:
  #     - "22379:2379"
  #     - "22380:2380"

  # etcd可视化工具
  etcdkeeper:
    image: evildecay/etcdkeeper
    container_name: etcdkeeper
    ports:
      - "8099:8080"
    restart: unless-stopped


  # rabbitmq:
  #   image: rabbitmq:3.8-management
  #   container_name: rabbitmq
  #   volumes:
  #     - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
  #     - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
  #     - ./rabbitmq/rabbitmq_delayed_message_exchange-3.8.0.ez:/plugins/rabbitmq_delayed_message_exchange-3.8.0.ez
  #   environment:
  #     TZ: Asia/Shanghai
  #   ports:
  #     - "15672:15672"
  #     - "5672:5672"
  #   restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    ports:
      - "2181:2181"
    restart: unless-stopped


  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      TZ: Asia/Shanghai
      KAFKA_ADVERTISED_HOST_NAME: 10.0.100.77 #填写本机地址 localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true # 是否自动创建topic
    volumes:
      - ./kafka/docker.sock:/var/run/docker.sock
    ports:
      - "9092:9092"
    restart: unless-stopped


  # pulsar:
  #   image: apachepulsar/pulsar:2.7.2
  #   container_name: pulsar
  #   command: bin/pulsar standalone
  #   volumes:
  #     - ./pulsar/data:/pulsar/data
  #     - ./pulsar/conf:/pulsar/config
  #   ports:
  #     - "6650:6650"
  #     - "9080:8080"
  #   restart: unless-stopped

  # pulsar-manager:
  #   image: apachepulsar/pulsar-manager:v0.2.0
  #   container_name: pulsar-manager
  #   depends_on:
  #     - pulsar
  #   links:
  #     - pulsar
  #   environment:
  #     - SPRING_CONFIGURATION_FILE=/pulsar-manager/pulsar-manager/application.properties
  #   ports:
  #     - "7750:7750"
  #     - "9527:9527"
  #   restart: unless-stopped

  # beanstalkd1:
  #   image: schickling/beanstalkd
  #   container_name: beanstalkd1
  #   volumes:
  #     - ./beanstalkd/data1:/data
  #   ports:
  #     - "11300:11300"
  #   restart: unless-stopped

  # beanstalkd2:
  #   image: schickling/beanstalkd
  #   container_name: beanstalkd2
  #   volumes:
  #     - ./beanstalkd/data2:/data
  #   ports:
  #     - "11301:11300"
  #   restart: unless-stopped

  # beanstalkd-console:
  #   image: schickling/beanstalkd-console
  #   container_name: beanstalkd-console
  #   depends_on:
  #     - beanstalkd1
  #     - beanstalkd2
  #   links:
  #     - beanstalkd1
  #     - beanstalkd2
  #   environment:
  #     BEANSTALKD_PORT_11300_TCP_ADDR: beanstalkd1
  #   ports:
  #     - "2080:2080"
  #   restart: unless-stopped

  # clickhouse:
  #   image: yandex/clickhouse-server
  #   container_name: clickhouse
  #   volumes:
  #     - ./clickhouse/data:/var/lib/clickhouse
  #   ports:
  #     - "8123:8123"
  #   restart: unless-stopped

  #asynqmon asynq延迟队列、定时队列的webui - Asynqmon asynq delay queue, timing queue's webUI

  asynqmon:
    image: hibiken/asynqmon:latest
    container_name: asynqmon
    command:
      - '--redis-addr=redis:6379'
      - '--redis-password=G62m50oigInC30sf'
    depends_on:
      - redis
    ports:
      - "8980:8080"
    restart: unless-stopped


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
      - ./elasticsearch/sh:/apps
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped


  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      I18N_LOCALE: zh-CN
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 #设置访问elasticsearch的地址
      TZ: Asia/Shanghai
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    restart: unless-stopped


  # #jaeger链路追踪 — Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      LOG_LEVEL: debug
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778/tcp"
      - "16686:16686/tcp"
      - "14268:14268/tcp"
      - "14250:14250/tcp"
    restart: unless-stopped


  #消费kafka中filebeat收集的数据输出到es - The data output collected by FileBeat in Kafka is output to ES
  go-stash:
    image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
    #    image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
    container_name: go-stash
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    volumes:
      - ./go-stash/etc:/app/etc
    depends_on:
      - elasticsearch
      - kafka
    restart: unless-stopped


  #收集业务数据 - Collect business data
  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    entrypoint: "filebeat -e -strict.perms=false" #解决配置文件权限问题 - Solving the configuration file permissions
    volumes:
      - ./filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
    depends_on:
      - kafka
    restart: unless-stopped


  # prometheus监控
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    user: root
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/node_down.yml:/etc/prometheus/node_down.yml
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped


  # #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  grafana:
    image: grafana/grafana:8.0.6
    container_name: grafana
    user: root
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - ./grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped




  # # prometheus报警插件
  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   volumes:
  #     - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   ports:
  #     - "9093:9093"
  #   restart: unless-stopped

  # # prometheus获取服务器信息
  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   ports:
  #     - "9100:9100"
  #   restart: unless-stopped

  # # prometheus监控docker容器服务
  # cadvisor:
  #   image: google/cadvisor
  #   container_name: cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   ports:
  #     - "8080:8080"
  #   restart: unless-stopped

  # prometheus 监控 mysql
  # mysqld-exporter:
  #   image: prom/mysqld-exporter
  #   container_name: mysqld-exporter
  #   environment:
  #     - DATA_SOURCE_NAME=root:PXDN93VRKUm8TeE7@(mysql:3306)/ #username:password@(ip:端口)
  #   ports:
  #     - "9104:9104"
  #   restart: unless-stopped

  #
  #
  # # 其他
  # zentao:
  #   image: easysoft/zentao:latest
  #   container_name: zentao
  #   volumes:
  #     - ./zentao/data:/www/zentaopms
  #   ports:
  #     - "9089:80"
  #   restart: unless-stopped

  # # php:
  #   image: php:7.4-fpm-alpine
  #   container_name: php
  #   environment:
  #     TZ: Asia/Shanghai
  #   volumes:
  #     - ./nginx/www:/usr/share/nginx/html
  #   ports:
  #     - "9000:9000"
  #   restart: unless-stopped

  # # nginx:
  #   image: nginx:1.21.1-alpine
  #   container_name: nginx
  #   environment:
  #     TZ: Asia/Shanghai
  #   depends_on:
  #     - php
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #     - ./nginx/www:/usr/share/nginx/html
  #     - ./nginx/log:/var/log/nginx
  #   ports:
  #     - "8081:80"
  #   restart: unless-stopped
